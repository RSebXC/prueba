
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Generador;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\023\000\002\002\004\000\002\002\005\000\002\007" +
    "\004\000\002\007\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\006\007\000\002\006\005\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\004\015\000\002\010\020\000\002\011" +
    "\005\000\002\011\003\000\002\012\003\000\002\012\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\004\017\005\001\002\000\004\002\067\001" +
    "\002\000\020\010\014\011\011\015\016\021\007\032\010" +
    "\034\020\042\006\001\002\000\032\010\ufff6\011\ufff6\015" +
    "\ufff6\016\ufff6\020\ufff6\021\ufff6\026\ufff6\027\ufff6\032\ufff6" +
    "\033\ufff6\034\ufff6\042\ufff6\001\002\000\004\030\047\001" +
    "\002\000\020\010\014\011\011\021\007\022\041\032\010" +
    "\034\020\042\006\001\002\000\032\010\ufff7\011\ufff7\015" +
    "\ufff7\016\ufff7\020\ufff7\021\ufff7\026\ufff7\027\ufff7\032\ufff7" +
    "\033\ufff7\034\ufff7\042\ufff7\001\002\000\022\010\ufffc\011" +
    "\ufffc\015\ufffc\020\ufffc\021\ufffc\032\ufffc\034\ufffc\042\ufffc" +
    "\001\002\000\022\010\ufffe\011\ufffe\015\ufffe\020\ufffe\021" +
    "\ufffe\032\ufffe\034\ufffe\042\ufffe\001\002\000\032\010\ufff8" +
    "\011\ufff8\015\ufff8\016\ufff8\020\ufff8\021\ufff8\026\ufff8\027" +
    "\ufff8\032\ufff8\033\ufff8\034\ufff8\042\ufff8\001\002\000\022" +
    "\010\014\011\011\015\016\020\035\021\007\032\010\034" +
    "\020\042\006\001\002\000\004\030\022\001\002\000\022" +
    "\010\ufffb\011\ufffb\015\ufffb\020\ufffb\021\ufffb\032\ufffb\034" +
    "\ufffb\042\ufffb\001\002\000\032\010\ufff5\011\ufff5\015\ufff5" +
    "\016\ufff5\020\ufff5\021\ufff5\026\ufff5\027\ufff5\032\ufff5\033" +
    "\ufff5\034\ufff5\042\ufff5\001\002\000\022\010\ufffd\011\ufffd" +
    "\015\ufffd\020\ufffd\021\ufffd\032\ufffd\034\ufffd\042\ufffd\001" +
    "\002\000\004\031\023\001\002\000\004\030\024\001\002" +
    "\000\004\030\025\001\002\000\004\034\026\001\002\000" +
    "\004\037\027\001\002\000\004\040\030\001\002\000\014" +
    "\010\014\011\011\032\010\034\020\042\006\001\002\000" +
    "\004\016\032\001\002\000\004\041\033\001\002\000\022" +
    "\010\ufff4\011\ufff4\015\ufff4\020\ufff4\021\ufff4\032\ufff4\034" +
    "\ufff4\042\ufff4\001\002\000\022\010\uffff\011\uffff\015\uffff" +
    "\020\uffff\021\uffff\032\uffff\034\uffff\042\uffff\001\002\000" +
    "\004\002\000\001\002\000\004\033\ufff0\001\002\000\004" +
    "\027\044\001\002\000\004\033\043\001\002\000\004\034" +
    "\042\001\002\000\004\033\uffef\001\002\000\032\010\ufff9" +
    "\011\ufff9\015\ufff9\016\ufff9\020\ufff9\021\ufff9\026\ufff9\027" +
    "\ufff9\032\ufff9\033\ufff9\034\ufff9\042\ufff9\001\002\000\014" +
    "\010\014\011\011\032\010\034\020\042\006\001\002\000" +
    "\004\033\046\001\002\000\032\010\ufffa\011\ufffa\015\ufffa" +
    "\016\ufffa\020\ufffa\021\ufffa\026\ufffa\027\ufffa\032\ufffa\033" +
    "\ufffa\034\ufffa\042\ufffa\001\002\000\004\031\050\001\002" +
    "\000\004\030\051\001\002\000\004\030\052\001\002\000" +
    "\004\022\053\001\002\000\004\034\054\001\002\000\004" +
    "\037\055\001\002\000\004\040\056\001\002\000\004\024" +
    "\057\001\002\000\014\010\014\011\011\032\010\034\020" +
    "\042\006\001\002\000\006\026\063\027\062\001\002\000" +
    "\006\026\ufff1\027\ufff1\001\002\000\014\010\014\011\011" +
    "\032\010\034\020\042\006\001\002\000\004\016\064\001" +
    "\002\000\004\041\065\001\002\000\024\010\ufff3\011\ufff3" +
    "\015\ufff3\020\ufff3\021\ufff3\032\ufff3\033\ufff3\034\ufff3\042" +
    "\ufff3\001\002\000\006\026\ufff2\027\ufff2\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\004\002\003\001\001\000\002\001\001\000" +
    "\014\004\020\005\012\006\016\007\014\010\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\036\010" +
    "\035\012\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\020\005" +
    "\033\006\016\010\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\060\011\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.out.println("Error sintáctico: "+s.value+" linea: "+s.left+" columna: "+s.right);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintáctico unrecovered: "+s.value+" linea: "+s.left+" columna: "+s.right);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Arbol start_val = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // list ::= PROGRAM list_cod END_PROGRAM 
            {
              Arbol RESULT =null;
		int list_cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int list_cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Arbol list_c = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        Arbol list = new Arbol("list");
        list.añadirHijo(list_c);
        System.out.println(list_c.lexema);
        System.out.print("wenas");
        RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // list_cod ::= list_cod list_expresion 
            {
              Arbol RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Arbol list = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int list_cexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int list_cexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arbol list_cexp = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
Arbol expresion = new Arbol ("list_cod");
expresion.añadirHijo(list);
expresion.añadirHijo(list_cexp);

RESULT=expresion;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_cod",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // list_cod ::= list_expresion 
            {
              Arbol RESULT =null;
		int list_expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int list_expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arbol list_exp = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
 Arbol expresion = new Arbol("list_cod");
                                                       expresion.añadirHijo(list_exp);
System.out.print("aqui"+ expresion.lexema);
                                                       RESULT = expresion;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_cod",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // list_expresion ::= list_var 
            {
              Arbol RESULT =null;
		int listVarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listVarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arbol listVar = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                       Arbol expresion = new Arbol("list_expresion");
                                                       expresion.añadirHijo(listVar);
                                                       System.out.println("aqui"+ expresion.lexema +" aqui "+ expresion.hijos.get(0).hijos.get(0).lexema);
                                                       RESULT = expresion;
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // list_expresion ::= list_arreglos 
            {
              Arbol RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arbol array = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                       Arbol expresion = new Arbol("list_expresion");
                                                       expresion.añadirHijo(array);
                                                       RESULT = expresion;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // list_expresion ::= expresion 
            {
              Arbol RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arbol exp = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                       Arbol expresion = new Arbol("list_expresion");
                                                       expresion.añadirHijo(exp);
                                                       RESULT = expresion;
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expresion ::= OP expresion COMMA expresion PARDER 
            {
              Arbol RESULT =null;
		int $0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int $0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String $0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Arbol $1 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String $2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Arbol $3 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String $4 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                       Arbol expresion = new Arbol("expresion");
                                                       expresion.añadirHijo(new Arbol($0));
                                                       expresion.añadirHijo($1);
                                                       expresion.añadirHijo(new Arbol($2));
                                                       expresion.añadirHijo($3);
                                                       expresion.añadirHijo(new Arbol($4));
                                                       System.out.println("expresion");
                                                       RESULT = expresion;

                                                       
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresion ::= OP tipo_arreglo PARDER 
            {
              Arbol RESULT =null;
		int $0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String $0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Arbol $1 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String $2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                       Arbol expresion = new Arbol("expresion");
                                                       expresion.añadirHijo(new Arbol ($0));
                                                       expresion.añadirHijo($1);
                                                       expresion.añadirHijo(new Arbol ($2));
                                                       System.out.println(" arreglo");
                                                       RESULT = expresion;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresion ::= ENTERO 
            {
              Arbol RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String $1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Arbol expresion = new Arbol("expresion");

                                                       expresion.añadirHijo(new Arbol($1));
                                                       RESULT = expresion;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresion ::= DECIMAL 
            {
              Arbol RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String $1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Arbol expresion = new Arbol("expresion");
                                                       expresion.añadirHijo(new Arbol($1));
                                                       RESULT = expresion;
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresion ::= CADENA 
            {
              Arbol RESULT =null;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String $1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Arbol expresion = new Arbol("expresion");
                                                       expresion.añadirHijo(new Arbol($1));
                                                       RESULT = expresion; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresion ::= ID 
            {
              Arbol RESULT =null;
		int $0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String $0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                                       Arbol expresion = new Arbol("expresion");
                                                       expresion.añadirHijo(new Arbol($0));
                                                       RESULT = expresion;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // list_var ::= VAR DEST TIPO DEST DEST ID MENOS LINEA expresion END_VAR PYC 
            {
              Arbol RESULT =null;
		int $0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int $0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String $0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String $1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String $2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String $3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int $4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int $4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String $4 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int $5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int $5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String $5 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int $6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int $6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String $6 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int $7left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int $7right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String $7 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int $8left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $8right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Arbol $8 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $9left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $9right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String $9 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $10left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $10right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String $10 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
Arbol list_var = new Arbol ("list_var");
list_var.añadirHijo(new Arbol($0));
list_var.añadirHijo(new Arbol($1));
list_var.añadirHijo(new Arbol($2));
list_var.añadirHijo(new Arbol($3));
list_var.añadirHijo(new Arbol($4));
list_var.añadirHijo(new Arbol($5));
list_var.añadirHijo(new Arbol($6));
list_var.añadirHijo(new Arbol($7));
list_var.añadirHijo($8);
list_var.añadirHijo(new Arbol($9));
list_var.añadirHijo(new Arbol($10));



RESULT = list_var;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_var",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // list_arreglos ::= ARR DEST TIPO DEST DEST AT ID MENOS LINEA LBRACKET list_varA RBRACKET END_VAR PYC 
            {
              Arbol RESULT =null;
		int $0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int $0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		String $0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		String $1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String $2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int $3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int $3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String $3 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int $4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int $4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String $4 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int $5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int $5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String $5 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int $6left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int $6right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String $6 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int $7left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int $7right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String $7 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int $8left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int $8right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String $8 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int $9left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int $9right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String $9 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int $10left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int $10right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Arbol $10 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int $11left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $11right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String $11 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $12left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $12right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String $12 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $13left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $13right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String $13 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
Arbol list_varA = new Arbol ("list_arreglos");
list_varA.añadirHijo(new Arbol($0));
list_varA.añadirHijo(new Arbol($1));
list_varA.añadirHijo(new Arbol($2));
list_varA.añadirHijo(new Arbol($3));
list_varA.añadirHijo(new Arbol($4));
list_varA.añadirHijo(new Arbol($5));
list_varA.añadirHijo(new Arbol($6));
list_varA.añadirHijo(new Arbol($7));
list_varA.añadirHijo(new Arbol($8));
list_varA.añadirHijo(new Arbol($9));
list_varA.añadirHijo($10);
list_varA.añadirHijo(new Arbol($11));
list_varA.añadirHijo(new Arbol($12));
list_varA.añadirHijo(new Arbol($13));
System.out.println("lista arreglo");
RESULT = list_varA;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_arreglos",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // list_varA ::= list_varA COMMA expresion 
            {
              Arbol RESULT =null;
		int $0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int $0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Arbol $0 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String $1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arbol $2 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
Arbol list_varA = new Arbol ("list_arreglos");
list_varA.añadirHijo($0);
list_varA.añadirHijo(new Arbol ($1));
list_varA.añadirHijo($2);
RESULT = list_varA;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_varA",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // list_varA ::= expresion 
            {
              Arbol RESULT =null;
		int $0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arbol $0 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
Arbol list_varA = new Arbol ("list_arreglos");
list_varA.añadirHijo($0);
RESULT = list_varA;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_varA",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo_arreglo ::= list_arreglos 
            {
              Arbol RESULT =null;
		int $0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Arbol $0 = (Arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
Arbol list_varA = new Arbol ("list_arreglos");
list_varA.añadirHijo($0);
System.out.println("tipo arreglo");

RESULT = list_varA;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_arreglo",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_arreglo ::= AT ID 
            {
              Arbol RESULT =null;
		int $0left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int $0right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String $0 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int $1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int $1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String $1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
Arbol list_varA = new Arbol ("list_arreglos");
list_varA.añadirHijo(new Arbol ($0));
list_varA.añadirHijo(new Arbol ($1));
RESULT = list_varA;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo_arreglo",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
